/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { PageProdutoDTO } from '../model/pageProdutoDTO';
import { ProdutoDTO } from '../model/produtoDTO';
import { ResponseProdutoDTO } from '../model/responseProdutoDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ProdutoControllerService {

    protected basePath = 'http://localhost:8080/cachacaria-api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * countByFornecedor
     * 
     * @param fornecedorId fornecedorId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public countByFornecedorUsingGET(fornecedorId: number, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public countByFornecedorUsingGET(fornecedorId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public countByFornecedorUsingGET(fornecedorId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public countByFornecedorUsingGET(fornecedorId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (fornecedorId === null || fornecedorId === undefined) {
            throw new Error('Required parameter fornecedorId was null or undefined when calling countByFornecedorUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<number>(`${this.basePath}/produtos/produtos/count/fornecedorId/${encodeURIComponent(String(fornecedorId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * delete
     * 
     * @param produtoId produtoId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteUsingDELETE(produtoId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteUsingDELETE(produtoId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteUsingDELETE(produtoId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteUsingDELETE(produtoId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (produtoId === null || produtoId === undefined) {
            throw new Error('Required parameter produtoId was null or undefined when calling deleteUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/produtos/produto/${encodeURIComponent(String(produtoId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findAllByFornecedor
     * 
     * @param fornecedorId fornecedorId
     * @param pag pag
     * @param ord ord
     * @param dir dir
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllByFornecedorUsingGET(fornecedorId: number, pag?: number, ord?: string, dir?: string, observe?: 'body', reportProgress?: boolean): Observable<PageProdutoDTO>;
    public findAllByFornecedorUsingGET(fornecedorId: number, pag?: number, ord?: string, dir?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageProdutoDTO>>;
    public findAllByFornecedorUsingGET(fornecedorId: number, pag?: number, ord?: string, dir?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageProdutoDTO>>;
    public findAllByFornecedorUsingGET(fornecedorId: number, pag?: number, ord?: string, dir?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (fornecedorId === null || fornecedorId === undefined) {
            throw new Error('Required parameter fornecedorId was null or undefined when calling findAllByFornecedorUsingGET.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pag !== undefined && pag !== null) {
            queryParameters = queryParameters.set('pag', <any>pag);
        }
        if (ord !== undefined && ord !== null) {
            queryParameters = queryParameters.set('ord', <any>ord);
        }
        if (dir !== undefined && dir !== null) {
            queryParameters = queryParameters.set('dir', <any>dir);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<PageProdutoDTO>(`${this.basePath}/produtos/produtos/fornecedorId/${encodeURIComponent(String(fornecedorId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findAll
     * 
     * @param pag pag
     * @param ord ord
     * @param dir dir
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllUsingGET1(pag?: number, ord?: string, dir?: string, observe?: 'body', reportProgress?: boolean): Observable<PageProdutoDTO>;
    public findAllUsingGET1(pag?: number, ord?: string, dir?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageProdutoDTO>>;
    public findAllUsingGET1(pag?: number, ord?: string, dir?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageProdutoDTO>>;
    public findAllUsingGET1(pag?: number, ord?: string, dir?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pag !== undefined && pag !== null) {
            queryParameters = queryParameters.set('pag', <any>pag);
        }
        if (ord !== undefined && ord !== null) {
            queryParameters = queryParameters.set('ord', <any>ord);
        }
        if (dir !== undefined && dir !== null) {
            queryParameters = queryParameters.set('dir', <any>dir);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<PageProdutoDTO>(`${this.basePath}/produtos/produtos`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findByCodProduto
     * 
     * @param cod cod
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findByCodProdutoUsingGET(cod: string, observe?: 'body', reportProgress?: boolean): Observable<ResponseProdutoDTO>;
    public findByCodProdutoUsingGET(cod: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseProdutoDTO>>;
    public findByCodProdutoUsingGET(cod: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseProdutoDTO>>;
    public findByCodProdutoUsingGET(cod: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cod === null || cod === undefined) {
            throw new Error('Required parameter cod was null or undefined when calling findByCodProdutoUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<ResponseProdutoDTO>(`${this.basePath}/produtos/produto/codProduto/${encodeURIComponent(String(cod))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findById
     * 
     * @param produtoId produtoId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findByIdUsingGET1(produtoId: number, observe?: 'body', reportProgress?: boolean): Observable<ResponseProdutoDTO>;
    public findByIdUsingGET1(produtoId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseProdutoDTO>>;
    public findByIdUsingGET1(produtoId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseProdutoDTO>>;
    public findByIdUsingGET1(produtoId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (produtoId === null || produtoId === undefined) {
            throw new Error('Required parameter produtoId was null or undefined when calling findByIdUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<ResponseProdutoDTO>(`${this.basePath}/produtos/produto/id/${encodeURIComponent(String(produtoId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * save
     * 
     * @param fornecedorId fornecedorId
     * @param produtoDTO produtoDTO
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveUsingPOST1(fornecedorId: number, produtoDTO: ProdutoDTO, observe?: 'body', reportProgress?: boolean): Observable<ResponseProdutoDTO>;
    public saveUsingPOST1(fornecedorId: number, produtoDTO: ProdutoDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseProdutoDTO>>;
    public saveUsingPOST1(fornecedorId: number, produtoDTO: ProdutoDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseProdutoDTO>>;
    public saveUsingPOST1(fornecedorId: number, produtoDTO: ProdutoDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (fornecedorId === null || fornecedorId === undefined) {
            throw new Error('Required parameter fornecedorId was null or undefined when calling saveUsingPOST1.');
        }

        if (produtoDTO === null || produtoDTO === undefined) {
            throw new Error('Required parameter produtoDTO was null or undefined when calling saveUsingPOST1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ResponseProdutoDTO>(`${this.basePath}/produtos/produto/fornecedorId/${encodeURIComponent(String(fornecedorId))}`,
            produtoDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * update
     * 
     * @param produtoDTO produtoDTO
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateUsingPUT1(produtoDTO: ProdutoDTO, observe?: 'body', reportProgress?: boolean): Observable<ResponseProdutoDTO>;
    public updateUsingPUT1(produtoDTO: ProdutoDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseProdutoDTO>>;
    public updateUsingPUT1(produtoDTO: ProdutoDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseProdutoDTO>>;
    public updateUsingPUT1(produtoDTO: ProdutoDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (produtoDTO === null || produtoDTO === undefined) {
            throw new Error('Required parameter produtoDTO was null or undefined when calling updateUsingPUT1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ResponseProdutoDTO>(`${this.basePath}/produtos/`,
            produtoDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
